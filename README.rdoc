= CountDescendents.rb

Created by Drew Boardman

== DESCRIPTION:

CountDescendents is a gem that returns the descendent nodes for a given user input. 

== REQUIREMENTS:

* ruby 1.9.3 or higher

* Nokogiri 1.6.0 and later

  * libxml2 >=2.6.21

* open-uri

* rspec (for test suite)

=== Synopsis and Instructions

First step is to bundle install (if you don't currently have the required gems installed).

To run the program, simply make sure you are in the countDescendents/count_descendents/lib$ and run:

    $ ruby count_descendents.rb

From there, follow the $stdout command messages in the console. When entering input, do not use quotes to indicate you are entering a string (this is explained below in the "Notes" section). Also, be sure to enter the full web address that you are looking to parse. For example:

    $ http://www.bestbuy.com 		#valid URL input
    $ www.bestbuy.com        		#invalid input.

=== Testing

To run the test suite, enter the directory countDescendents/count_descendents$ and run:

    $ rspec spec

The errors outputted are normal, and are a result of tests that input invalid arguments.

=== Notes

There are several notes I would like to make about the design of the gem and the decisions I made. The most pressing would be the Page#grab_node method. There are quirks with how Nokogiri and open-uri function that makes it tricky to take a raw HTML element and find a Nokogiri::Document::Element (which is a node) or an XML node. The best solution to this would be to prompt the user for css or xml selectors, and then use an Xpath command to find the node that way. The problem instructions were clear that the input would be an HTML element, so Xpath inputs wouldn't satisfy the problem constraints.

The solution was to take the HTML as a string, convert that string into a Nokogiri::Document::Element, and then convert that into a string. This ensures that when I compare with the #to_s version of any given node on the site, they will match. Several issues arrise.

* Nokogiri adds escape characters when using the Node#to_s or #to_s methods.
* Nokogiri adds closing HTML tags when using the Node#to_html or #to_s methods.

This block illustrates the issue:

    html_input = '<ul class="utility-nav">'

    node_string = Nokogiri::HTML::DocumentFragment.parse('<ul class="utility-nav">').child

    2.2.0 :202 > node_string.class
    => Nokogiri::XML::Element 

    2.2.0 :203 > node_string.to_s
    => "<ul class=\"utility-nav\"></ul>"  #adds extra escape characters and closing tag
    2.2.0 :204 > node_string.to_html
    => "<ul class=\"utility-nav\"></ul>"  #same effect

These results do not match use #to_s or #to_html on a NodeSet element found within the site.

    2.2.0 :207 > node_from_site.to_s
 				=> "<ul class=\"utility-nav\"> ..."  #does not match above

Again, a better solution would be to prompt the user for CSS and Xpath selectors, but given the problem constraints the solution I came up with was to use String#gsub to remove all non-letters. Any given HTML trickery from Nokogiri would be eliminated from both the input HTML and the NodeSet from the site. An example of a similar issue can be found in {this Stack Overflow thread}[http://stackoverflow.com/questions/12330033/creating-a-source-element-without-a-closing-tag-in-nokogiri].

* STDIN will take "" as string input, which will mess with open-uri's ability to read the URL or node.

This is not so much a bug as it is the constraints of open-uri. We just need to prompt the user to not designate their input with quotes.

=== Finding the correct node

With the above solution, now we can find the correct node and perform whatever operations we want (in this case, grab all descendents and return their count). I also added a method to return an array of their HTML tags, as seen in the problem description.

This works mainly using the Node#traverse method. This recursively searches each node (and their children, children-of-children, etc). These are added to an empty array, which is then counted. The HTML tags array is returned using the Page#desc_array_tags method.

=== Improvements

A few improvements could be made to make this more robust.

* using fuzzy matching instead of String#gsub

This would allow us to deal with the escape characters and closing HTML tags that Nokogiri gives. Given time restraints and the desired outcome, fuzzy matching would be more time consuming than helpful.

* accept css selectors as user input

This is the most easily implemented improvement. It would allow us to run simple Node#xpath searches on the input URL. They would be exact matches and have the additional benefit of not having to deal with translating strings to html to xml, etc.